// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace TransitRealtime
{
    [System.Serializable()]
    public partial class FeedMessage
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedMessage Deserialize(Stream stream)
        {
            FeedMessage instance = new FeedMessage();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedMessage DeserializeLengthDelimited(Stream stream)
        {
            FeedMessage instance = new FeedMessage();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedMessage DeserializeLength(Stream stream, int length)
        {
            FeedMessage instance = new FeedMessage();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static FeedMessage Deserialize(byte[] buffer)
        {
            FeedMessage instance = new FeedMessage();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.FeedMessage Deserialize(byte[] buffer, TransitRealtime.FeedMessage instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedMessage Deserialize(Stream stream, TransitRealtime.FeedMessage instance)
        {
            if (instance.entity == null)
                instance.entity = new List<TransitRealtime.FeedEntity>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.header == null)
                            instance.header = TransitRealtime.FeedHeader.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.FeedHeader.DeserializeLengthDelimited(stream, instance.header);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.entity.Add(TransitRealtime.FeedEntity.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedMessage DeserializeLengthDelimited(Stream stream, TransitRealtime.FeedMessage instance)
        {
            if (instance.entity == null)
                instance.entity = new List<TransitRealtime.FeedEntity>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.header == null)
                            instance.header = TransitRealtime.FeedHeader.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.FeedHeader.DeserializeLengthDelimited(stream, instance.header);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.entity.Add(TransitRealtime.FeedEntity.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedMessage DeserializeLength(Stream stream, int length, TransitRealtime.FeedMessage instance)
        {
            if (instance.entity== null)
                instance.entity = new List<TransitRealtime.FeedEntity>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.header == null)
                            instance.header = TransitRealtime.FeedHeader.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.FeedHeader.DeserializeLengthDelimited(stream, instance.header);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.entity.Add(TransitRealtime.FeedEntity.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, FeedMessage instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.header == null)
                throw new ArgumentNullException("Header", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            TransitRealtime.FeedHeader.Serialize(msField, instance.header);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            stream.Write(msField.GetBuffer(), 0, (int)length1);

            if (instance.entity!= null)
            {
                foreach (var i2 in instance.entity)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    TransitRealtime.FeedEntity.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    stream.Write(msField.GetBuffer(), 0, (int)length2);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(FeedMessage instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, FeedMessage instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class FeedHeader
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedHeader Deserialize(Stream stream)
        {
            FeedHeader instance = new FeedHeader();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedHeader DeserializeLengthDelimited(Stream stream)
        {
            FeedHeader instance = new FeedHeader();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedHeader DeserializeLength(Stream stream, int length)
        {
            FeedHeader instance = new FeedHeader();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static FeedHeader Deserialize(byte[] buffer)
        {
            FeedHeader instance = new FeedHeader();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.FeedHeader Deserialize(byte[] buffer, TransitRealtime.FeedHeader instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedHeader Deserialize(Stream stream, TransitRealtime.FeedHeader instance)
        {
            instance.incrementality = TransitRealtime.FeedHeader.Incrementality.FULL_DATASET;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.gtfs_realtime_version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.incrementality = (TransitRealtime.FeedHeader.Incrementality)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedHeader DeserializeLengthDelimited(Stream stream, TransitRealtime.FeedHeader instance)
        {
            instance.incrementality = TransitRealtime.FeedHeader.Incrementality.FULL_DATASET;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.gtfs_realtime_version = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.incrementality = (TransitRealtime.FeedHeader.Incrementality)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedHeader DeserializeLength(Stream stream, int length, TransitRealtime.FeedHeader instance)
        {
            instance.incrementality = TransitRealtime.FeedHeader.Incrementality.FULL_DATASET;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.gtfs_realtime_version= global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.incrementality = (TransitRealtime.FeedHeader.Incrementality)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, FeedHeader instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.gtfs_realtime_version == null)
                throw new ArgumentNullException("gtfs_realtime_version", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.gtfs_realtime_version));
            if (instance.incrementality != Incrementality.FULL_DATASET)
            {
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.incrementality);
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.timestamp);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(FeedHeader instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, FeedHeader instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class FeedEntity
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedEntity Deserialize(Stream stream)
        {
            FeedEntity instance = new FeedEntity();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedEntity DeserializeLengthDelimited(Stream stream)
        {
            FeedEntity instance = new FeedEntity();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FeedEntity DeserializeLength(Stream stream, int length)
        {
            FeedEntity instance = new FeedEntity();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static FeedEntity Deserialize(byte[] buffer)
        {
            FeedEntity instance = new FeedEntity();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.FeedEntity Deserialize(byte[] buffer, TransitRealtime.FeedEntity instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedEntity Deserialize(Stream stream, TransitRealtime.FeedEntity instance)
        {
            instance.is_deleted = false;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.is_deleted = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.trip_update == null)
                            instance.trip_update = TransitRealtime.TripUpdate.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripUpdate.DeserializeLengthDelimited(stream, instance.trip_update);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehiclePosition.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehiclePosition.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.alert == null)
                            instance.alert = TransitRealtime.Alert.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.Alert.DeserializeLengthDelimited(stream, instance.alert);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedEntity DeserializeLengthDelimited(Stream stream, TransitRealtime.FeedEntity instance)
        {
            instance.is_deleted = false;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.is_deleted = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.trip_update == null)
                            instance.trip_update = TransitRealtime.TripUpdate.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripUpdate.DeserializeLengthDelimited(stream, instance.trip_update);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehiclePosition.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehiclePosition.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.alert == null)
                            instance.alert = TransitRealtime.Alert.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.Alert.DeserializeLengthDelimited(stream, instance.alert);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.FeedEntity DeserializeLength(Stream stream, int length, TransitRealtime.FeedEntity instance)
        {
            instance.is_deleted = false;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.is_deleted = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.trip_update == null)
                            instance.trip_update = TransitRealtime.TripUpdate.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripUpdate.DeserializeLengthDelimited(stream, instance.trip_update);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehiclePosition.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehiclePosition.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.alert == null)
                            instance.alert = TransitRealtime.Alert.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.Alert.DeserializeLengthDelimited(stream, instance.alert);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, FeedEntity instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.id == null)
                throw new ArgumentNullException("Id", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.id));
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.is_deleted);
            if (instance.trip_update != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿msField.SetLength(0);
                TransitRealtime.TripUpdate.Serialize(msField, instance.trip_update);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                stream.Write(msField.GetBuffer(), 0, (int)length3);

            }
            if (instance.vehicle != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                ﻿msField.SetLength(0);
                TransitRealtime.VehiclePosition.Serialize(msField, instance.vehicle);
                // Length delimited byte array
                uint length4 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                stream.Write(msField.GetBuffer(), 0, (int)length4);

            }
            if (instance.alert != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                ﻿msField.SetLength(0);
                TransitRealtime.Alert.Serialize(msField, instance.alert);
                // Length delimited byte array
                uint length5 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                stream.Write(msField.GetBuffer(), 0, (int)length5);

            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(FeedEntity instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, FeedEntity instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class TripUpdate
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TripUpdate Deserialize(Stream stream)
        {
            TripUpdate instance = new TripUpdate();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TripUpdate DeserializeLengthDelimited(Stream stream)
        {
            TripUpdate instance = new TripUpdate();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TripUpdate DeserializeLength(Stream stream, int length)
        {
            TripUpdate instance = new TripUpdate();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static TripUpdate Deserialize(byte[] buffer)
        {
            TripUpdate instance = new TripUpdate();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.TripUpdate Deserialize(byte[] buffer, TransitRealtime.TripUpdate instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TripUpdate Deserialize(Stream stream, TransitRealtime.TripUpdate instance)
        {
            if (instance.stop_time_update == null)
                instance.stop_time_update = new List<TransitRealtime.TripUpdate.StopTimeUpdate>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.stop_time_update.Add(TransitRealtime.TripUpdate.StopTimeUpdate.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TripUpdate DeserializeLengthDelimited(Stream stream, TransitRealtime.TripUpdate instance)
        {
            if (instance.stop_time_update == null)
                instance.stop_time_update = new List<TransitRealtime.TripUpdate.StopTimeUpdate>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.stop_time_update.Add(TransitRealtime.TripUpdate.StopTimeUpdate.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TripUpdate DeserializeLength(Stream stream, int length, TransitRealtime.TripUpdate instance)
        {
            if (instance.stop_time_update == null)
                instance.stop_time_update = new List<TransitRealtime.TripUpdate.StopTimeUpdate>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.stop_time_update.Add(TransitRealtime.TripUpdate.StopTimeUpdate.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, TripUpdate instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.trip == null)
                throw new ArgumentNullException("Trip", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
             TransitRealtime.TripDescriptor.Serialize(msField, instance.trip);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            stream.Write(msField.GetBuffer(), 0, (int)length1);

            if (instance.vehicle != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿msField.SetLength(0);
                TransitRealtime.VehicleDescriptor.Serialize(msField, instance.vehicle);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                stream.Write(msField.GetBuffer(), 0, (int)length3);

            }
            if (instance.stop_time_update != null)
            {
                foreach (var i2 in instance.stop_time_update)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    TransitRealtime.TripUpdate.StopTimeUpdate.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    stream.Write(msField.GetBuffer(), 0, (int)length2);

                }
            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.timestamp);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(TripUpdate instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, TripUpdate instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        [System.Serializable()]
        public partial class StopTimeEvent
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static StopTimeEvent Deserialize(Stream stream)
            {
                StopTimeEvent instance = new StopTimeEvent();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static StopTimeEvent DeserializeLengthDelimited(Stream stream)
            {
                StopTimeEvent instance = new StopTimeEvent();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static StopTimeEvent DeserializeLength(Stream stream, int length)
            {
                StopTimeEvent instance = new StopTimeEvent();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static StopTimeEvent Deserialize(byte[] buffer)
            {
                StopTimeEvent instance = new StopTimeEvent();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static TransitRealtime.TripUpdate.StopTimeEvent Deserialize(byte[] buffer, TransitRealtime.TripUpdate.StopTimeEvent instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TripUpdate.StopTimeEvent Deserialize(Stream stream, TransitRealtime.TripUpdate.StopTimeEvent instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.delay = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.time = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.uncertainty = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TripUpdate.StopTimeEvent DeserializeLengthDelimited(Stream stream, TransitRealtime.TripUpdate.StopTimeEvent instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.delay = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.time = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.uncertainty = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TripUpdate.StopTimeEvent DeserializeLength(Stream stream, int length, TransitRealtime.TripUpdate.StopTimeEvent instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.delay = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.time = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.uncertainty = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, StopTimeEvent instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.delay);
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.time);
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.uncertainty);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(StopTimeEvent instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, StopTimeEvent instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }


        [System.Serializable()]
        public partial class StopTimeUpdate
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static StopTimeUpdate Deserialize(Stream stream)
            {
                StopTimeUpdate instance = new StopTimeUpdate();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static StopTimeUpdate DeserializeLengthDelimited(Stream stream)
            {
                StopTimeUpdate instance = new StopTimeUpdate();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static StopTimeUpdate DeserializeLength(Stream stream, int length)
            {
                StopTimeUpdate instance = new StopTimeUpdate();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static StopTimeUpdate Deserialize(byte[] buffer)
            {
                StopTimeUpdate instance = new StopTimeUpdate();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static TransitRealtime.TripUpdate.StopTimeUpdate Deserialize(byte[] buffer, TransitRealtime.TripUpdate.StopTimeUpdate instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TripUpdate.StopTimeUpdate Deserialize(Stream stream, TransitRealtime.TripUpdate.StopTimeUpdate instance)
            {
                instance.schedule_relationship = TransitRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED;
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.stop_sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            if (instance.arrival == null)
                                instance.arrival = TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream);
                            else
                                TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream, instance.arrival);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            if (instance.departure == null)
                                instance.departure = TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream);
                            else
                                TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream, instance.departure);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.schedule_relationship = (TransitRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TripUpdate.StopTimeUpdate DeserializeLengthDelimited(Stream stream, TransitRealtime.TripUpdate.StopTimeUpdate instance)
            {
                instance.schedule_relationship = TransitRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED;
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.stop_sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            if (instance.arrival == null)
                                instance.arrival = TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream);
                            else
                                TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream, instance.arrival);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            if (instance.departure == null)
                                instance.departure = TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream);
                            else
                                TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream, instance.departure);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.schedule_relationship = (TransitRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TripUpdate.StopTimeUpdate DeserializeLength(Stream stream, int length, TransitRealtime.TripUpdate.StopTimeUpdate instance)
            {
                instance.schedule_relationship = TransitRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship.SCHEDULED;
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.stop_sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            if (instance.arrival == null)
                                instance.arrival = TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream);
                            else
                                TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream, instance.arrival);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            if (instance.departure == null)
                                instance.departure = TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream);
                            else
                                TransitRealtime.TripUpdate.StopTimeEvent.DeserializeLengthDelimited(stream, instance.departure);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.schedule_relationship = (TransitRealtime.TripUpdate.StopTimeUpdate.ScheduleRelationship)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, StopTimeUpdate instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.stop_sequence);
                if (instance.stop_id != null)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.stop_id));
                }
               
                if (instance.arrival != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    TransitRealtime.TripUpdate.StopTimeEvent.Serialize(msField, instance.arrival);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    stream.Write(msField.GetBuffer(), 0, (int)length2);

                }
                if (instance.departure != null)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿msField.SetLength(0);
                    TransitRealtime.TripUpdate.StopTimeEvent.Serialize(msField, instance.departure);
                    // Length delimited byte array
                    uint length3 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                    stream.Write(msField.GetBuffer(), 0, (int)length3);

                }
                if (instance.schedule_relationship != ScheduleRelationship.SCHEDULED)
                {
                    // Key for field: 5, Varint
                    stream.WriteByte(40);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.schedule_relationship);
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(StopTimeUpdate instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, StopTimeUpdate instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }

    }

    [System.Serializable()]
    public partial class VehiclePosition
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehiclePosition Deserialize(Stream stream)
        {
            VehiclePosition instance = new VehiclePosition();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehiclePosition DeserializeLengthDelimited(Stream stream)
        {
            VehiclePosition instance = new VehiclePosition();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehiclePosition DeserializeLength(Stream stream, int length)
        {
            VehiclePosition instance = new VehiclePosition();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static VehiclePosition Deserialize(byte[] buffer)
        {
            VehiclePosition instance = new VehiclePosition();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.VehiclePosition Deserialize(byte[] buffer, TransitRealtime.VehiclePosition instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.VehiclePosition Deserialize(Stream stream, TransitRealtime.VehiclePosition instance)
        {
            instance.current_status = TransitRealtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO;
            instance.congestion_level = TransitRealtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL;
            //instance.occupancy_status = TransitRealtime.VehiclePosition.OccupancyStatus.EMPTY;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.position == null)
                            instance.position = TransitRealtime.Position.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.Position.DeserializeLengthDelimited(stream, instance.position);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.current_stop_sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    
                    // Field 4 Varint
                    case 32:
                        instance.current_status = (VehicleStopStatus)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.congestion_level = (TransitRealtime.VehiclePosition.CongestionLevel)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    //case 68:
                    //    instance.occupancy_status = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    //    continue;
                        // Field 6 Varint
                     //case 68:
                     //       instance.occupancy_status = (TransitRealtime.VehiclePosition.OccupancyStatus)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                     //       continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.VehiclePosition DeserializeLengthDelimited(Stream stream, TransitRealtime.VehiclePosition instance)
        {
            instance.current_status = TransitRealtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO;
            instance.congestion_level = TransitRealtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL;
            //instance.occupancy_status = TransitRealtime.VehiclePosition.OccupancyStatus.EMPTY;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.position == null)
                            instance.position = TransitRealtime.Position.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.Position.DeserializeLengthDelimited(stream, instance.position);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.current_stop_sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    
                    // Field 4 Varint
                    case 32:
                        instance.current_status = (TransitRealtime.VehiclePosition.VehicleStopStatus)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.congestion_level = (TransitRealtime.VehiclePosition.CongestionLevel)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    //case 68:
                    //    instance.occupancy_status = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    //    continue;
                        //case 88:
                        //    instance.occupancy_status = (TransitRealtime.VehiclePosition.OccupancyStatus)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        //    continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.VehiclePosition DeserializeLength(Stream stream, int length, TransitRealtime.VehiclePosition instance)
        {
            instance.current_status = TransitRealtime.VehiclePosition.VehicleStopStatus.IN_TRANSIT_TO;
            instance.congestion_level = TransitRealtime.VehiclePosition.CongestionLevel.UNKNOWN_CONGESTION_LEVEL;
            //instance.occupancy_status = TransitRealtime.VehiclePosition.OccupancyStatus.EMPTY;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.vehicle == null)
                            instance.vehicle = TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.VehicleDescriptor.DeserializeLengthDelimited(stream, instance.vehicle);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.position == null)
                            instance.position = TransitRealtime.Position.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.Position.DeserializeLengthDelimited(stream, instance.position);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.current_stop_sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.current_status = (TransitRealtime.VehiclePosition.VehicleStopStatus)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.congestion_level = (TransitRealtime.VehiclePosition.CongestionLevel)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                  //  case 68:
                       // instance.occupancy_status = (TransitRealtime.VehiclePosition.OccupancyStatus)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        //continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, VehiclePosition instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.trip != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                TransitRealtime.TripDescriptor.Serialize(msField, instance.trip);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);

            }
            if (instance.vehicle != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                ﻿msField.SetLength(0);
                 TransitRealtime.VehicleDescriptor.Serialize(msField, instance.vehicle);
                // Length delimited byte array
                uint length8 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length8);
                stream.Write(msField.GetBuffer(), 0, (int)length8);

            }
            if (instance.position != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                TransitRealtime.Position.Serialize(msField, instance.position);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                stream.Write(msField.GetBuffer(), 0, (int)length2);

            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.current_stop_sequence);
            if (instance.stop_id != null)
            {
                // Key for field: 7, LengthDelimited
                stream.WriteByte(58);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.stop_id));
            }
           
            if (instance.current_status != VehicleStopStatus.IN_TRANSIT_TO)
            {
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.current_status);
            }
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.timestamp);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.congestion_level);

            stream.WriteByte(68);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, (ulong)instance.occupancy_status);
            //if (instance.occupancy_status != null)
            //{
            //    // Key for field: 7, Varint
            //    stream.WriteByte(68);
            //    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.occupancy_status));
            //}
            // Key for field: 7, Varint
            
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(VehiclePosition instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, VehiclePosition instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class Alert
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Alert Deserialize(Stream stream)
        {
            Alert instance = new Alert();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Alert DeserializeLengthDelimited(Stream stream)
        {
            Alert instance = new Alert();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Alert DeserializeLength(Stream stream, int length)
        {
            Alert instance = new Alert();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Alert Deserialize(byte[] buffer)
        {
            Alert instance = new Alert();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.Alert Deserialize(byte[] buffer, TransitRealtime.Alert instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.Alert Deserialize(Stream stream, TransitRealtime.Alert instance)
        {
            if (instance.active_period == null)
                instance.active_period = new List<TransitRealtime.TimeRange>();
            if (instance.informed_entity == null)
                instance.informed_entity = new List<TransitRealtime.EntitySelector>();
            instance.cause = TransitRealtime.Alert.Cause.UNKNOWN_CAUSE;
            instance.effect = TransitRealtime.Alert.Effect.UNKNOWN_EFFECT;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.active_period.Add(TransitRealtime.TimeRange.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.informed_entity.Add(TransitRealtime.EntitySelector.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.cause = (TransitRealtime.Alert.Cause)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.effect = (TransitRealtime.Alert.Effect)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.url == null)
                            instance.url = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.url);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        if (instance.header_text == null)
                            instance.header_text = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.header_text);
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        if (instance.description_text == null)
                            instance.description_text = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.description_text);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.Alert DeserializeLengthDelimited(Stream stream, TransitRealtime.Alert instance)
        {
            if (instance.active_period == null)
                instance.active_period = new List<TransitRealtime.TimeRange>();
            if (instance.informed_entity == null)
                instance.informed_entity = new List<TransitRealtime.EntitySelector>();
            instance.cause = TransitRealtime.Alert.Cause.UNKNOWN_CAUSE;
            instance.effect = TransitRealtime.Alert.Effect.UNKNOWN_EFFECT;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.active_period.Add(TransitRealtime.TimeRange.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.informed_entity.Add(TransitRealtime.EntitySelector.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.cause = (TransitRealtime.Alert.Cause)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.effect = (TransitRealtime.Alert.Effect)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.url == null)
                            instance.url = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.url);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        if (instance.header_text == null)
                            instance.header_text = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.header_text);
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        if (instance.description_text == null)
                            instance.description_text = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.description_text);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.Alert DeserializeLength(Stream stream, int length, TransitRealtime.Alert instance)
        {
            if (instance.active_period == null)
                instance.active_period = new List<TransitRealtime.TimeRange>();
            if (instance.informed_entity == null)
                instance.informed_entity = new List<TransitRealtime.EntitySelector>();
            instance.cause = TransitRealtime.Alert.Cause.UNKNOWN_CAUSE;
            instance.effect = TransitRealtime.Alert.Effect.UNKNOWN_EFFECT;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.active_period.Add(TransitRealtime.TimeRange.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.informed_entity.Add(TransitRealtime.EntitySelector.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.cause = (TransitRealtime.Alert.Cause)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.effect = (TransitRealtime.Alert.Effect)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.url == null)
                            instance.url = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.url);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        if (instance.header_text == null)
                            instance.header_text = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.header_text);
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        if (instance.description_text == null)
                            instance.description_text = TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TranslatedString.DeserializeLengthDelimited(stream, instance.description_text);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Alert instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.active_period != null)
            {
                foreach (var i1 in instance.active_period)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    TransitRealtime.TimeRange.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);

                }
            }
            if (instance.informed_entity != null)
            {
                foreach (var i5 in instance.informed_entity)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    ﻿msField.SetLength(0);
                    TransitRealtime.EntitySelector.Serialize(msField, i5);
                    // Length delimited byte array
                    uint length5 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                    stream.Write(msField.GetBuffer(), 0, (int)length5);

                }
            }
            if (instance.cause != Cause.UNKNOWN_CAUSE)
            {
                // Key for field: 6, Varint
                stream.WriteByte(48);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.cause);
            }
            if (instance.effect != Effect.UNKNOWN_EFFECT)
            {
                // Key for field: 7, Varint
                stream.WriteByte(56);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.effect);
            }
            if (instance.url != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                ﻿msField.SetLength(0);
                TransitRealtime.TranslatedString.Serialize(msField, instance.url);
                // Length delimited byte array
                uint length8 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length8);
                stream.Write(msField.GetBuffer(), 0, (int)length8);

            }
            if (instance.header_text != null)
            {
                // Key for field: 10, LengthDelimited
                stream.WriteByte(82);
                ﻿msField.SetLength(0);
                TransitRealtime.TranslatedString.Serialize(msField, instance.header_text);
                // Length delimited byte array
                uint length10 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length10);
                stream.Write(msField.GetBuffer(), 0, (int)length10);

            }
            if (instance.description_text != null)
            {
                // Key for field: 11, LengthDelimited
                stream.WriteByte(90);
                ﻿msField.SetLength(0);
                TransitRealtime.TranslatedString.Serialize(msField, instance.description_text);
                // Length delimited byte array
                uint length11 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length11);
                stream.Write(msField.GetBuffer(), 0, (int)length11);

            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Alert instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Alert instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class TimeRange
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TimeRange Deserialize(Stream stream)
        {
            TimeRange instance = new TimeRange();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TimeRange DeserializeLengthDelimited(Stream stream)
        {
            TimeRange instance = new TimeRange();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TimeRange DeserializeLength(Stream stream, int length)
        {
            TimeRange instance = new TimeRange();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static TimeRange Deserialize(byte[] buffer)
        {
            TimeRange instance = new TimeRange();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.TimeRange Deserialize(byte[] buffer, TransitRealtime.TimeRange instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TimeRange Deserialize(Stream stream, TransitRealtime.TimeRange instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.start = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.end = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TimeRange DeserializeLengthDelimited(Stream stream, TransitRealtime.TimeRange instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.start = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.end = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TimeRange DeserializeLength(Stream stream, int length, TransitRealtime.TimeRange instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.start = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.end = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, TimeRange instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.start);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.end);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(TimeRange instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, TimeRange instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class Position
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Position Deserialize(Stream stream)
        {
            Position instance = new Position();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Position DeserializeLengthDelimited(Stream stream)
        {
            Position instance = new Position();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Position DeserializeLength(Stream stream, int length)
        {
            Position instance = new Position();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Position Deserialize(byte[] buffer)
        {
            Position instance = new Position();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.Position Deserialize(byte[] buffer, TransitRealtime.Position instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.Position Deserialize(Stream stream, TransitRealtime.Position instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.latitude = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.longitude = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.bearing = br.ReadSingle();
                        continue;
                    // Field 4 Fixed64
                    case 33:
                        instance.odometer = br.ReadDouble();
                        continue;
                    // Field 5 Fixed32
                    case 45:
                        instance.speed = br.ReadSingle();
                        continue;
                    //case 88:
                    //    instance.occupancy = br.ReadInt32();
                    //    continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.Position DeserializeLengthDelimited(Stream stream, TransitRealtime.Position instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.latitude = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.longitude = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.bearing = br.ReadSingle();
                        continue;
                    // Field 4 Fixed64
                    case 33:
                        instance.odometer = br.ReadDouble();
                        continue;
                    // Field 5 Fixed32
                    case 45:
                        instance.speed = br.ReadSingle();
                        continue;
                    //case 88:
                    //    instance.speed = br.ReadInt32();
                    //    continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.Position DeserializeLength(Stream stream, int length, TransitRealtime.Position instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.latitude = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.longitude = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.bearing = br.ReadSingle();
                        continue;
                    // Field 4 Fixed64
                    case 33:
                        instance.odometer = br.ReadDouble();
                        continue;
                    // Field 5 Fixed32
                    case 45:
                        instance.speed = br.ReadSingle();
                        continue;
                    //case 88:
                    //    instance.speed = br.ReadInt32();
                    //    continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Position instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.latitude);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.longitude);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.bearing);
            // Key for field: 4, Fixed64
            stream.WriteByte(33);
            bw.Write(instance.odometer);
            // Key for field: 5, Fixed32
            stream.WriteByte(45);
            bw.Write(instance.speed);
            //stream.WriteByte(88);
            //bw.Write(instance.occupancy);


            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Position instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Position instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class TripDescriptor
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TripDescriptor Deserialize(Stream stream)
        {
            TripDescriptor instance = new TripDescriptor();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TripDescriptor DeserializeLengthDelimited(Stream stream)
        {
            TripDescriptor instance = new TripDescriptor();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TripDescriptor DeserializeLength(Stream stream, int length)
        {
            TripDescriptor instance = new TripDescriptor();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static TripDescriptor Deserialize(byte[] buffer)
        {
            TripDescriptor instance = new TripDescriptor();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.TripDescriptor Deserialize(byte[] buffer, TransitRealtime.TripDescriptor instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TripDescriptor Deserialize(Stream stream, TransitRealtime.TripDescriptor instance)
        {
            instance.schedule_relationship = TransitRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.trip_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.route_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.start_time = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.start_date = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.schedule_relationship = (TransitRealtime.TripDescriptor.ScheduleRelationship)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TripDescriptor DeserializeLengthDelimited(Stream stream, TransitRealtime.TripDescriptor instance)
        {
            instance.schedule_relationship = TransitRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.trip_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.route_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.start_time = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.start_date = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.schedule_relationship = (TransitRealtime.TripDescriptor.ScheduleRelationship)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TripDescriptor DeserializeLength(Stream stream, int length, TransitRealtime.TripDescriptor instance)
        {
            instance.schedule_relationship = TransitRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.trip_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.route_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.start_time = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.start_date = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.schedule_relationship = (TransitRealtime.TripDescriptor.ScheduleRelationship)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, TripDescriptor instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.trip_id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.trip_id));
            }
            if (instance.route_id != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.route_id));
            }
            if (instance.start_time != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.start_time));
            }
            if (instance.start_date != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.start_date));
            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.schedule_relationship);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(TripDescriptor instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, TripDescriptor instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class VehicleDescriptor
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleDescriptor Deserialize(Stream stream)
        {
            VehicleDescriptor instance = new VehicleDescriptor();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleDescriptor DeserializeLengthDelimited(Stream stream)
        {
            VehicleDescriptor instance = new VehicleDescriptor();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static VehicleDescriptor DeserializeLength(Stream stream, int length)
        {
            VehicleDescriptor instance = new VehicleDescriptor();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static VehicleDescriptor Deserialize(byte[] buffer)
        {
            VehicleDescriptor instance = new VehicleDescriptor();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.VehicleDescriptor Deserialize(byte[] buffer, TransitRealtime.VehicleDescriptor instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.VehicleDescriptor Deserialize(Stream stream, TransitRealtime.VehicleDescriptor instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.label = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.license_plate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.VehicleDescriptor DeserializeLengthDelimited(Stream stream, TransitRealtime.VehicleDescriptor instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.label = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.license_plate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.VehicleDescriptor DeserializeLength(Stream stream, int length, TransitRealtime.VehicleDescriptor instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.label = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.license_plate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, VehicleDescriptor instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.id));
            }
            if (instance.label != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.label));
            }
            if (instance.license_plate != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.license_plate));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(VehicleDescriptor instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, VehicleDescriptor instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class EntitySelector
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EntitySelector Deserialize(Stream stream)
        {
            EntitySelector instance = new EntitySelector();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EntitySelector DeserializeLengthDelimited(Stream stream)
        {
            EntitySelector instance = new EntitySelector();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EntitySelector DeserializeLength(Stream stream, int length)
        {
            EntitySelector instance = new EntitySelector();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static EntitySelector Deserialize(byte[] buffer)
        {
            EntitySelector instance = new EntitySelector();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.EntitySelector Deserialize(byte[] buffer, TransitRealtime.EntitySelector instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.EntitySelector Deserialize(Stream stream, TransitRealtime.EntitySelector instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.agency_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.route_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.route_type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.EntitySelector DeserializeLengthDelimited(Stream stream, TransitRealtime.EntitySelector instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.agency_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.route_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.route_type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.EntitySelector DeserializeLength(Stream stream, int length, TransitRealtime.EntitySelector instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.agency_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.route_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.route_type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.trip == null)
                            instance.trip = TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream);
                        else
                            TransitRealtime.TripDescriptor.DeserializeLengthDelimited(stream, instance.trip);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.stop_id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, EntitySelector instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.agency_id != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.agency_id));
            }
            if (instance.route_id != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.route_id));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.route_type);
            if (instance.trip != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                ﻿msField.SetLength(0);
                 TransitRealtime.TripDescriptor.Serialize(msField, instance.trip);
                // Length delimited byte array
                uint length4 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                stream.Write(msField.GetBuffer(), 0, (int)length4);

            }
            if (instance.stop_id != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.stop_id));
            }


            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(EntitySelector instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, EntitySelector instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class TranslatedString
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TranslatedString Deserialize(Stream stream)
        {
            TranslatedString instance = new TranslatedString();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TranslatedString DeserializeLengthDelimited(Stream stream)
        {
            TranslatedString instance = new TranslatedString();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TranslatedString DeserializeLength(Stream stream, int length)
        {
            TranslatedString instance = new TranslatedString();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static TranslatedString Deserialize(byte[] buffer)
        {
            TranslatedString instance = new TranslatedString();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static TransitRealtime.TranslatedString Deserialize(byte[] buffer, TransitRealtime.TranslatedString instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TranslatedString Deserialize(Stream stream, TransitRealtime.TranslatedString instance)
        {
            if (instance.translation == null)
                instance.translation = new List<TransitRealtime.TranslatedString.Translation>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.translation.Add(TransitRealtime.TranslatedString.Translation.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TranslatedString DeserializeLengthDelimited(Stream stream, TransitRealtime.TranslatedString instance)
        {
            if (instance.translation == null)
                instance.translation = new List<TransitRealtime.TranslatedString.Translation>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.translation.Add(TransitRealtime.TranslatedString.Translation.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static TransitRealtime.TranslatedString DeserializeLength(Stream stream, int length, TransitRealtime.TranslatedString instance)
        {
            if (instance.translation == null)
                instance.translation = new List<TransitRealtime.TranslatedString.Translation>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.translation.Add(TransitRealtime.TranslatedString.Translation.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, TranslatedString instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.translation != null)
            {
                foreach (var i1 in instance.translation)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    TransitRealtime.TranslatedString.Translation.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(TranslatedString instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, TranslatedString instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        [System.Serializable()]
        public partial class Translation
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Translation Deserialize(Stream stream)
            {
                Translation instance = new Translation();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Translation DeserializeLengthDelimited(Stream stream)
            {
                Translation instance = new Translation();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Translation DeserializeLength(Stream stream, int length)
            {
                Translation instance = new Translation();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static Translation Deserialize(byte[] buffer)
            {
                Translation instance = new Translation();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static TransitRealtime.TranslatedString.Translation Deserialize(byte[] buffer, TransitRealtime.TranslatedString.Translation instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TranslatedString.Translation Deserialize(Stream stream, TransitRealtime.TranslatedString.Translation instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.language = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TranslatedString.Translation DeserializeLengthDelimited(Stream stream, TransitRealtime.TranslatedString.Translation instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.language = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static TransitRealtime.TranslatedString.Translation DeserializeLength(Stream stream, int length, TransitRealtime.TranslatedString.Translation instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.language = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, Translation instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                if (instance.text == null)
                    throw new ArgumentNullException("Text", "Required by proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.text));
                if (instance.language != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.language));
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(Translation instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, Translation instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }

    }

}
